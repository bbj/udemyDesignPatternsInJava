public class Main {
    public static void main(String[] args) {

//        Vehicle v = new Vehicle("Ford", 6);
//        v.slowDown();       //Vehicle is slowing down...
//        v.speedUp();        //Vehicle is speeding up...
//        v.fuel();           //Vehicle is fueling...

        //Liskov Substitution Principle:
        //    we can replace Vehicle by PetrolCar or ElectricCar without behavior issue
        Vehicle v = new PetrolCar("Lincoln", 4);
        v.slowDown();       //PetrolCar is slowing down...
        v.speedUp();        //PetrolCar is speeding up...
        v.fuel();           //PetrolCar is fueling...

        //"DESIGN SMELL": architectural design is not the best one possible ....
        v = new ElectricCar("Tesla", 2);
        v.slowDown();       //ElectricCar is slowing down...
        v.speedUp();        //ElectricCar is speeding up...
        v.fuel();           //Exception in thread "main" java.lang.Error: ElectricCar cannot fuel!!!!...
                            //application is broken, functionality not applicable to this child class
                            //SOLID PRINCIPLE IS VIOLATED => DESIGN SMELL!!!!!
        /*
        PROBLEM:
            - Vehicle is not the good parent class for ElectricCar
            - because fuel() method cannot be used as far as ElectricCar are concerned
        SOLUTION:
            - use Interfaces or Abstract Classes
            - make the fuel() method and Vehicle class both abstract
            - it ensures that the child class, ElectricCar, will define the correct behavior
        RUN
            Vehicle is slowing down...
            PetrolCar is slowing down...
            Vehicle is speeding up...
            PetrolCar is speeding up...
            PetrolCar is fueling with gaz...
            Vehicle is slowing down...
            ElectricCar is slowing down...
            Vehicle is speeding up...
            ElectricCar is speeding up...
            ElectricCar is being charged...
         */

    }
}